package com.ticketbook.controller;

import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

@RestController
public class TicketBookController{
	
	    @Autowired
	    private TicketService ticketService;

	    @PostMapping("/purchase_ticket")
	    public ResponseEntity<TicketResponse> purchaseTicket(@RequestBody PurchaseRequest request) {
	        Ticket ticket = ticketService.purchaseTicket(request.getFrom(), request.getTo(), request.getUser());
	        return ResponseEntity.ok(mapToTicketResponse(ticket));
	    }

	    @GetMapping("/view_receipt/{email}")
	    public ResponseEntity<TicketResponse> viewReceipt(@PathVariable String email) {
	        Ticket ticket = ticketService.viewReceipt(email);
	        if (ticket != null) {
	            return ResponseEntity.ok(mapToTicketResponse(ticket));
	        } else {
	            return ResponseEntity.notFound().build();
	        }
	    }

	    @GetMapping("/view_allocation/{section}")
	    public ResponseEntity<List<TicketResponse>> viewAllocation(@PathVariable String section) {
	        List<Ticket> tickets = ticketService.viewAllocation(section);
	        return ResponseEntity.ok(mapToTicketResponses(tickets));
	    }

	    @DeleteMapping("/remove_user")
	    public ResponseEntity<String> removeUser(@RequestBody RemoveUserRequest request) {
	        ticketService.removeUser(request.getEmail());
	        return ResponseEntity.ok("User removed successfully");
	    }

	    @PutMapping("/modify_seat")
	    public ResponseEntity<String> modifySeat(@RequestBody ModifySeatRequest request) {
	        ticketService.modifySeat(request.getEmail(), request.getNewSection(), request.getNewSeatNumber());
	        return ResponseEntity.ok("Seat modified successfully");
	    }

	    private TicketResponse mapToTicketResponse(Ticket ticket) {
	        TicketResponse response = new TicketResponse();
	        response.setFrom(ticket.getFrom());
	        response.setTo(ticket.getTo());
	        response.setUser(ticket.getUser());
	        response.setPricePaid(ticket.getPricePaid());
	        response.setSeatSection(ticket.getSeatSection());
	        response.setSeatNumber(ticket.getSeatNumber());
	        response.setPurchaseTime(ticket.getPurchaseTime());
	        return response;
	    }

	    private List<TicketResponse> mapToTicketResponses(List<Ticket> tickets) {
	        return tickets.stream()
	                .map(this::mapToTicketResponse)
	                .collect(Collectors.toList());
	    }
	}